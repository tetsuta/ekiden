#!/usr/bin/ruby
# coding: utf-8

require './config'
require 'cgi'
require 'json'
require 'time'

cgi = CGI.new("html4")

mode = CGI::unescape(cgi['mode'])
ku = CGI::unescape(cgi['ku'])
team = CGI::unescape(cgi['team'])
teamid = CGI::unescape(cgi['teamid'])

# mode = "input"
# ku = "ktab1"
# team = "姶良"

# mode = "get_all_data"
# ku = "ktab1"

# mode = "get_team_result"
# teamid = "ttab1"

id2team = Hash::new()
id2team["ttab1"] = "姶良"
id2team["ttab2"] = "鹿児島"
id2team["ttab3"] = "日置"
id2team["ttab4"] = "川薩"
id2team["ttab5"] = "肝属"
id2team["ttab6"] = "川辺"
id2team["ttab7"] = "出水"
id2team["ttab8"] = "曽於"
id2team["ttab9"] = "指宿"
id2team["ttab10"] = "大島"
id2team["ttab11"] = "伊佐"
id2team["ttab12"] = "熊毛"


team_list = [
  "姶良",
  "鹿児島",
  "日置",
  "川薩",
  "肝属",
  "川辺",
  "出水",
  "曽於",
  "指宿",
  "大島",
  "伊佐",
  "熊毛"
]


# --------------------------------------------------
table_header = <<TABLEHEADER
<table class="table table-striped table-bordered">
TABLEHEADER

table_footer = <<TABLEFOOTER
</table>
TABLEFOOTER

def table_content_ku(index, team, time)
    content = <<CONTENT
<tr>
  <td>#{index}</td>
  <td>#{team}</td>
  <td>#{time.to_s.gsub(/ \+0900$/,"")}</td>
</tr>
CONTENT
    return content
end

def table_content_team(team, time, diff)
    content = <<CONTENT
<tr>
  <td>#{team}</td>
  <td>#{time.to_s.gsub(/ \+0900$/,"")}</td>
  <td>#{diff}</td>
</tr>
CONTENT
    return content
end

# --------------------------------------------------
if ku=~/ktab([0-9]+)/
  ku = "#{$1}区"
end

data = {}

case mode
when "allreset"
  File.open($data_file,"a+"){|wfp|
    wfp.puts "___reset___"
  }
  data = {
    "body" => "削除完了"
  }


when "start"
  current_time = Time.now.localtime("+09:00").to_s
  ku = "スタート"

  File.open($data_file,"a+"){|wfp|
    wfp.puts "___reset___"
    team_list.each{|team|
      data_set = [ku,team,current_time].join("\t")
      wfp.puts data_set
    }
  }

  data = {
    "body" => "start!"
  }


when "input"
  data_set = [ku,team,Time.now.localtime("+09:00").to_s].join("\t")

  File.open($data_file,"a+"){|wfp|
    wfp.puts data_set
  }

  data = {
    "body" => "input: #{data_set}"
  }

when "get_all_data"

  team_time = Hash::new()
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      if line =~ /___reset___/
        team_time.clear
        next
      end
      elems = line.chomp.split("\t")
      r_ku = elems[0]
      r_team = elems[1]
      r_time = Time.parse(elems[2]).localtime("+09:00")
      if ku == r_ku
        team_time[r_team] = r_time
      end
    }
  }


  buffer = ""
  index = 1
  buffer << table_header
  team_time.keys.sort{|a,b|
    team_time[a] <=> team_time[b]
  }.each{|team|
    buffer << table_content_ku(index, team, team_time[team])
    index += 1
  }
  buffer << table_footer

  data = {
    "body" => buffer
  }

when "get_team_result"

  ku_time = Hash::new()
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      if line =~ /___reset___/
        ku_time.clear
        next
      end
      elems = line.chomp.split("\t")
      r_ku = elems[0]
      r_team = elems[1]
      r_time = Time.parse(elems[2]).localtime("+09:00")
      
      if id2team[teamid] == r_team
        ku_time[r_ku] = r_time
      end
    }
  }

  buffer = ""
  prev = nil
  buffer << table_header
  ku_time.keys.sort{|a,b|
    ku_time[a] <=> ku_time[b]
  }.each{|ku|
    if prev == nil
      diff = "-"
    else
      diff_sec = ku_time[ku] - prev
      if diff_sec < 60
        diff = "#{diff_sec.to_i}秒"
      elsif diff_sec < 60*60
        min = (diff_sec / 60).floor
        sec = (diff_sec % 60).to_i
        diff = "#{min}分#{sec}秒"
      elsif diff_sec < 60*60*24
        hour = (diff_sec / 60*24).floor
        min = ((diff_sec % 60*24) / 60).floor
        sec = ((diff_sec % 60*24) % 60).to_i
        diff = "#{hour}時間#{min}分#{sec}秒"
      end
    end
    prev = ku_time[ku]
    buffer << table_content_team(ku, ku_time[ku], diff)
  }
  buffer << table_footer


  data = {
    "body" => buffer
  }
end



buffer = JSON.generate(data)
cgi.out({"Access-Control-Allow-Origin" => "*",
          "Content-Type" => "text/plain; charset=UTF-8"}){buffer}
