#!/usr/bin/ruby
# coding: utf-8

require './config'
require 'cgi'
require 'json'
require 'time'

cgi = CGI.new("html4")

mode = CGI::unescape(cgi['mode'])
input_ku = CGI::unescape(cgi['ku'])
input_team = CGI::unescape(cgi['team'])
input_time = CGI::unescape(cgi['time'])
teamid = CGI::unescape(cgi['teamid'])
input_key = CGI::unescape(cgi['key'])

# mode = "delete_data"
# input_key = "姶良__2021-02-11 23:11:38"

# mode = "edit_name"
# input_key = "姶良__2021-02-11 23:11:38"
# input_team = "鹿児島"

# mode = "edit_time"
# input_key = "姶良__2021-02-11 23:11:38"
# input_time = "2021-02-11 23:11:40"

# mode = "input"
# input_ku = "ktab1"
# input_team = "姶良"

# mode = "get_all_data"
# input_ku = "ktab1"

# mode = "get_team_result"
# teamid = "ttab1"

# ==================================================
class EkidenTime
  attr_reader :ku, :team, :time
  def initialize(ku, team, time)
    @ku = ku
    @team = team
    @time = time
  end
end

# ==================================================
id2team = Hash::new()
id2team["ttab1"] = "姶良"
id2team["ttab2"] = "鹿児島"
id2team["ttab3"] = "日置"
id2team["ttab4"] = "川薩"
id2team["ttab5"] = "肝属"
id2team["ttab6"] = "川辺"
id2team["ttab7"] = "出水"
id2team["ttab8"] = "曽於"
id2team["ttab9"] = "指宿"
id2team["ttab10"] = "大島"
id2team["ttab11"] = "伊佐"
id2team["ttab12"] = "熊毛"

team2index = Hash::new()
team2index["姶良"] = "1"
team2index["鹿児島"] = "2"
team2index["日置"] = "3"
team2index["川薩"] = "4"
team2index["肝属"] = "5"
team2index["川辺"] = "6"
team2index["出水"] = "7"
team2index["曽於"] = "8"
team2index["指宿"] = "9"
team2index["大島"] = "10"
team2index["伊佐"] = "11"
team2index["熊毛"] = "12"

team_list = [
  "姶良",
  "鹿児島",
  "日置",
  "川薩",
  "肝属",
  "川辺",
  "出水",
  "曽於",
  "指宿",
  "大島",
  "伊佐",
  "熊毛"
]


# --------------------------------------------------
table_header = <<TABLEHEADER
<table class="table table-striped table-bordered">
TABLEHEADER

table_footer = <<TABLEFOOTER
</table>
TABLEFOOTER


# ------------------------------   
def sec_print(sec)
  if sec.abs < 60
    sec_str = "#{sec.to_i}秒"
  elsif sec.abs < 60*60
    min = (sec / 60).floor
    sec = (sec % 60).to_i
    sec_str = "#{min}分#{sec}秒"
  elsif sec.abs < 60*60*24
    hour = (sec / (60*60)).floor
    min = ((sec % (60*60)) / 60).floor
    sec = ((sec % (60*60)) % 60).to_i
    sec_str = "#{hour}時間#{min}分#{sec}秒"
  end
  return sec_str
end

# ------------------------------
def table_content_ku(index, team, time, aira_time)
  diff = sec_print(time - aira_time)
  key = "#{team}__#{time.to_s.gsub(/ \+0900$/,"")}"
  content = <<CONTENT
<tr>
  <td>#{index}</td>
  <td>#{team}</td>
  <td>#{diff}</td>
  <td>#{time.to_s.gsub(/ \+0900$/,"")}</td>
  <td><button data-id=\"#{key}\" type=\"button\" class=\"editbutton btn btn-danger\">修正</button></td>
</tr>
CONTENT
    return content
end

# ------------------------------   
def table_content_team(team, time, diff)
    content = <<CONTENT
<tr>
  <td>#{team}</td>
  <td>#{time.to_s.gsub(/ \+0900$/,"")}</td>
  <td>#{diff}</td>
</tr>
CONTENT
    return content
end

# --------------------------------------------------
if input_ku=~/ktab([0-9]+)/
  input_ku = "#{$1}区"
end

data = {}

case mode
when "allreset"
  File.open($data_file,"a+"){|wfp|
    wfp.puts "___reset___"
  }
  data = {
    "body" => "削除完了"
  }


when "start"
  current_time = Time.now.localtime("+09:00").to_s
  ku = "スタート"

  File.open($data_file,"a+"){|wfp|
    wfp.puts "___reset___"
    team_list.each{|team|
      data_set = [ku,team,current_time].join("\t")
      wfp.puts data_set
    }
  }

  data = {
    "body" => "start!"
  }


when "input"
  data_set = [input_ku, input_team, Time.now.localtime("+09:00").to_s].join("\t")

  File.open($data_file,"a+"){|wfp|
    wfp.puts data_set
  }

  data = {
    "body" => "input: #{data_set}"
  }


when "get_all_data"
  passed = Hash::new()
  data_list = []    
  aira_time = nil
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      if line =~ /___reset___/
        passed.clear
        data_list.clear
        aira_time = nil
        next
      end
      elems = line.chomp.split("\t")
      r_ku = elems[0]
      r_team = elems[1]
      r_time = Time.parse(elems[2]).localtime("+09:00")
      if input_ku == r_ku
        data_list.push(EkidenTime.new(r_ku, r_team, r_time))
        if r_team == "姶良"
          aira_time = r_time
        end
        passed[team2index[r_team]] = 1
      end
    }
  }
  if aira_time == nil
    aira_time = data_list.map{|a| a.time}.max
  end

  buffer = ""
  index = 1
  buffer << table_header

  buffer << <<CONTENT
<tr>
  <td>【順位】</td>
  <td>【チーム】</td>
  <td>【タイム差】</td>
  <td>【通過時刻】</td>
  <td>【編集】</td>
</tr>
CONTENT

  data_list.sort{|a,b|
    a.time <=> b.time
  }.each{|score|
    buffer << table_content_ku(index, score.team, score.time, aira_time)
    index += 1
  }

  buffer << table_footer

  data = {
    "body" => buffer,
    "passed" => passed.keys
  }


when "get_team_result"
  ku_time = Hash::new()
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      if line =~ /___reset___/
        ku_time.clear
        next
      end
      elems = line.chomp.split("\t")
      r_ku = elems[0]
      r_team = elems[1]
      r_time = Time.parse(elems[2]).localtime("+09:00")
      
      if id2team[teamid] == r_team
        ku_time[r_ku] = r_time
      end
    }
  }

  buffer = ""
  prev = nil
  buffer << table_header
  ku_time.keys.sort{|a,b|
    ku_time[a] <=> ku_time[b]
  }.each{|ku|
    if prev == nil
      diff = "-"
    else
      diff_sec = ku_time[ku] - prev
      diff = sec_print(diff_sec)
    end
    prev = ku_time[ku]
    buffer << table_content_team(ku, ku_time[ku], diff)
  }
  buffer << table_footer


  data = {
    "body" => buffer
  }


when "edit_name"
  all_lines = []
  output_lines = []
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      all_lines.push(line.chomp)
    }
  }

  check_key = input_key.sub("__","\t")
  all_lines.reverse.each{|line|
    if line =~ /#{check_key}/
      elems = line.split("\t")
      elems[1] = input_team
      output_lines.push(elems.join("\t"))
    else
      output_lines.push(line)
    end
  }

  File.open($data_file,"w"){|wfp|
    wfp.puts(output_lines.reverse.join("\n"))
  }

  data = {
    "body" => "修正完了"
  }


when "edit_time"
  all_lines = []
  output_lines = []
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      all_lines.push(line.chomp)
    }
  }

  check_key = input_key.sub("__","\t")
  all_lines.reverse.each{|line|
    if line =~ /#{check_key}/
      elems = line.split("\t")
      elems[2] = input_time + " +0900"
      output_lines.push(elems.join("\t"))
    else
      output_lines.push(line)
    end
  }

  File.open($data_file,"w"){|wfp|
    wfp.puts(output_lines.reverse.join("\n"))
  }

  data = {
    "body" => "修正完了"
  }

when "delete_data"
  all_lines = []
  output_lines = []
  File.open($data_file,"r:UTF-8"){|fp|
    fp.each_line{|line|
      all_lines.push(line.chomp)
    }
  }

  check_key = input_key.sub("__","\t")
  all_lines.reverse.each{|line|
    unless line =~ /#{check_key}/
      output_lines.push(line)
    end
  }

  File.open($data_file,"w"){|wfp|
    wfp.puts(output_lines.reverse.join("\n"))
  }

  data = {
    "body" => "削除完了"
  }

end





buffer = JSON.generate(data)
cgi.out({"Access-Control-Allow-Origin" => "*",
          "Content-Type" => "text/plain; charset=UTF-8"}){buffer}
